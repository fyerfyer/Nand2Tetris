// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //01 and load:RAMLoad
    //10 and load:SCRLoad
    //11 and load:KEYLoad
    Not(in = address[13], out = Not14);
    Not(in = address[14], out = Not15);
    Not(in = Not14, out = Is14);
    Not(in = Not15, out = Is15);
    And(a = Not15, b = load, out = RAMLoad);
    And(a = Is15, b = Not14, out = SCR);
    And(a = SCR, b = load, out = SCRLoad);
    And(a = Is15, b = Is14, out = KEY);
    And(a = KEY, b = load, out = KEYLoad);

    //get RAM input and SCR output
    RAM16K(in = in, load = RAMLoad, address = address[0..13], out = RAMout);
    Screen(in = in, load = SCRLoad, address = address[0..12], out = SCRout);

    //get keyboard input first
    Keyboard(out = KeyOut);

    //Need to assure that other digit is zero!!!
    Or8Way(in = address[0..7], out = NotKey1);
  	Or8Way(in[0..4] = address[8..12], in[5..7] = false, out = NotKey2);
    Or(a = NotKey1, b = NotKey2, out = KeyboardLoad);
    Mux16(a = KeyOut, b = false, sel = KeyboardLoad, out = Keyboardout);

    //select the final output
    Mux16(a = SCRout, b = Keyboardout, sel = address[13], out = out1);
    Mux16(a = RAMout, b = out1, sel = address[14], out = out);
}