// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if( maxLength = 0 ) {
            let maxLength = 1;
        }

        let str = Array.new(maxLength);
        let length = 0;
        let maxLen = maxLength;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        //if the str array is full, we resize it 
        if (length = maxLen) {do resize(str);}

        let str[length] = c;
        let length = length + 1;
        return this;
    }

    method void resize(String str) {
        var String copyStr;
        var int index;
        let copyStr = String.new(maxLen * 2);

        //copy
        let index = 0;
        while (~ (index = length)) {
            let copyStr[index] = str[index];
            let index = index + 1;
        }

        //assign copyStr to str
        let str = copyStr;
        let maxLen = maxLen + maxLen;
        return;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {let length = length - 1;}
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum;
        var int index;
        var boolean neg;
        let index = 0;
        let neg = false;

        if (str[index] = 45) {
            let index = index + 1;
            let neg = true;
        }

        while (~(index = length) & String.is_digit(str[index])) {
            let sum = sum * 10;
            let sum = str[index];
            let index = index + 1;
        }

        if (neg) {return -sum;}
        else {return sum;}
    }

    // return whether the given char is a digit
    function boolean is_digit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String c;
        var int lengthOfVal;
        var int lastDigit;
        var boolean neg;
        var int index;

        let lengthOfVal = 0;
        let c = String.new(16); // a 16-digit integer 
        let neg = false;
        let index = 0;

        if (val < 0) {
            let val = -val;
            let neg = true;
        }

        //we first get the reversed version of our desired string
        while (~(val < 10)) {

            //use module operation to get the first digit
            let lastDigit = val - (val / 10 * 10);
            do c.setCharAt(lengthOfVal, lastDigit);
            let lengthOfVal = lengthOfVal + 1;
            let val = val / 10;
        }        

        if (neg) {
            do c.setCharAt(lengthOfVal, 45);
            let lengthOfVal = lengthOfVal + 1;
        }

        //we make lengthOfVal the last index we append the element
        //and set the new length of str first 
        //so that we can use it in our loop
        let length =lengthOfVal;
        let lengthOfVal = lengthOfVal - 1;
        if (length > maxLen) {do resize(str);}

        //then we reverse the temp string and copy it into str
        while (index < length) {
            do setCharAt(index, c.charAt(lengthOfVal));
            let lengthOfVal = lengthOfVal - 1;
            let index = index + 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
